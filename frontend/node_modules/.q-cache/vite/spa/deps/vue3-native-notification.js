import {
  inject
} from "./chunk-IS5AKJW5.js";
import "./chunk-RSJERJUL.js";

// node_modules/vue3-native-notification/index.js
var Notification = window.Notification || window.webkitNotification;
var onerror = function onerror2(event) {
};
var onclick = function onclick2(event) {
  event.preventDefault();
  window.focus();
  event.target.close();
};
var onclose = function onclose2(event) {
};
var onshow = function onshow2(event) {
};
var defaultEvents = {
  onerror,
  onclick,
  onclose,
  onshow
};
var Vue3NativeNotification = {
  install: function(app, options) {
    options = options || {};
    options.requestOnNotify = options.requestOnNotify || true;
    app.notification = {};
    app.config.globalProperties.$notification = {};
    const requestPermission = function() {
      return Notification.requestPermission();
    };
    app.notification.requestPermission = requestPermission;
    app.config.globalProperties.$notification.requestPermission = requestPermission;
    const show = function(title, opts, e) {
      if (!e.onerror)
        e.onerror = function() {
        };
      if (!e.onclick)
        e.onclick = function() {
        };
      if (!e.onclose)
        e.onclose = function() {
        };
      if (!e.onshow)
        e.onshow = function() {
        };
      return Promise.resolve().then(function() {
        if (options.requestOnNotify && Notification.permission !== "granted") {
          return requestPermission();
        }
        return Notification.permission;
      }).then(function(permission) {
        if (permission === "denied") {
          return new Error("No permission to show notification");
        }
        const bindOnError = function(event) {
          "use strict";
          defaultEvents.onerror(event);
          e.onerror(event);
        };
        const bindOnClick = function(event) {
          "use strict";
          defaultEvents.onclick(event);
          e.onclick(event);
        };
        const bindOnClose = function(event) {
          "use strict";
          defaultEvents.onclose(event);
          e.onclose(event);
        };
        const bindOnShow = function(event) {
          "use strict";
          defaultEvents.onshow(event);
          e.onshow(event);
        };
        try {
          const notification = new Notification(title, opts);
          notification.onerror = bindOnError;
          notification.onclick = bindOnClick;
          notification.onclose = bindOnClose;
          notification.onshow = bindOnShow;
          return notification;
        } catch (e2) {
          if (e2.name !== "TypeError") {
            return e2;
          }
          return navigator.serviceWorker.ready.then(function(reg) {
            reg.showNotification(title, opts);
          }).then(bindOnShow, bindOnError);
        }
      });
    };
    app.notification.show = show;
    app.config.globalProperties.$notification.show = show;
    app.provide("vue3NativeNotifications", app.config.globalProperties.$notification);
  }
};
function useNativeNotifications() {
  return inject("vue3NativeNotifications");
}
var vue3_native_notification_default = Vue3NativeNotification;

// dep:vue3-native-notification
var vue3_native_notification_default2 = vue3_native_notification_default;
export {
  vue3_native_notification_default2 as default,
  useNativeNotifications
};
//# sourceMappingURL=vue3-native-notification.js.map
